Index: QMapControl/browserimagemanager.cpp
===================================================================
--- QMapControl/browserimagemanager.cpp	(revision 14049)
+++ QMapControl/browserimagemanager.cpp	(working copy)
@@ -276,6 +276,7 @@
 
 void BrowserImageManager::setProxy(QString host, int port)
 {
+	/*
 	if (!host.isEmpty()) {
 #if QT_VERSION >= 0x040400
 		proxy.setType(QNetworkProxy::HttpCachingProxy);
@@ -285,5 +286,6 @@
 		proxy.setHostName(host);
 		proxy.setPort(port);
 	}
+	*/
 }
 
Index: Sync/DirtyList.cpp
===================================================================
--- Sync/DirtyList.cpp	(revision 14049)
+++ Sync/DirtyList.cpp	(working copy)
@@ -513,7 +513,7 @@
 	if (sendRequest("PUT",URL,DataIn,DataOut))
 	{
 		// chop off extra spaces, newlines etc
-		R->setId("rel_"+QString::number(DataOut.toInt()));
+		R->setId("rel_"+QString::number(DataOut.toLongLong()));
 		R->setLastUpdated(MapFeature::OSMServer);
 		R->setVersionNumber(0);
 		R->layer()->remove(R);
@@ -541,7 +541,7 @@
 	if (sendRequest("PUT",URL,DataIn,DataOut))
 	{
 		// chop off extra spaces, newlines etc
-		R->setId("way_"+QString::number(DataOut.toInt()));
+		R->setId("way_"+QString::number(DataOut.toLongLong()));
 		R->setLastUpdated(MapFeature::OSMServer);
 		R->setVersionNumber(0);
 		R->layer()->remove(R);
@@ -570,7 +570,7 @@
 	if (sendRequest("PUT",URL,DataIn,DataOut))
 	{
 		// chop off extra spaces, newlines etc
-		Pt->setId("node_"+QString::number(DataOut.toInt()));
+		Pt->setId("node_"+QString::number(DataOut.toLongLong()));
 		Pt->setLastUpdated(MapFeature::OSMServer);
 		Pt->setVersionNumber(0);
 		Pt->layer()->remove(Pt);
Index: Map/DownloadOSM.cpp
===================================================================
--- Map/DownloadOSM.cpp	(revision 14049)
+++ Map/DownloadOSM.cpp	(working copy)
@@ -27,6 +27,7 @@
 #include <QProgressDialog>
 #include <QStatusBar>
 #include <QInputDialog>
+#include <QNetworkProxy>
 
 #include "zlib/zlib.h"
 
@@ -184,8 +185,19 @@
 	Content.clear();
 	QBuffer ResponseBuffer(&Content);
 	ResponseBuffer.open(QIODevice::WriteOnly);
-	if (UseProxy)
-		Request.setProxy(ProxyHost,ProxyPort);
+
+	if (UseProxy) {
+		QNetworkProxy proxy;
+		proxy.setType(QNetworkProxy::Socks5Proxy);
+		proxy.setHostName(ProxyHost);
+		proxy.setPort(ProxyPort);
+		qDebug() << "Set proxy to " << ProxyHost << ":" << ProxyPort;
+		QNetworkProxy::setApplicationProxy(proxy);
+	}
+
+	/*if (UseProxy)
+		Request.setProxy(ProxyHost,ProxyPort);*/
+
 	QHttpRequestHeader Header("GET",url);
 	Header.setValue("Accept-Encoding", "gzip,deflate");
 	if (Port == 80)
@@ -198,6 +210,14 @@
 	if (Loop.exec() == QDialog::Rejected)
 	{
 		Request.abort();
+
+		if (UseProxy) {
+			QNetworkProxy proxy;
+			proxy.setType(QNetworkProxy::NoProxy);
+			qDebug() << "Removing proxy";
+			QNetworkProxy::setApplicationProxy(proxy);
+		}
+
 		return false;
 	}
 
@@ -220,6 +240,13 @@
 		}
 	}
 
+	if (UseProxy) {
+		QNetworkProxy proxy;
+		proxy.setType(QNetworkProxy::NoProxy);
+		qDebug() << "Removing proxy";
+		QNetworkProxy::setApplicationProxy(proxy);
+	}
+
 #ifdef DEBUG_EVERY_CALL
 	showDebug("GET", url, QByteArray() ,Content);
 #endif
@@ -237,8 +264,18 @@
 	QByteArray ba(Data.toUtf8());
 	QBuffer Buf(&ba);
 
-	if (UseProxy)
-		Request.setProxy(ProxyHost,ProxyPort);
+	if (UseProxy) {
+		QNetworkProxy proxy;
+		proxy.setType(QNetworkProxy::Socks5Proxy);
+		proxy.setHostName(ProxyHost);
+		proxy.setPort(ProxyPort);
+		qDebug() << "Set proxy to " << ProxyHost << ":" << ProxyPort;
+		QNetworkProxy::setApplicationProxy(proxy);
+	}
+
+	//if (UseProxy)
+	//	Request.setProxy(ProxyHost,ProxyPort);
+
 	QHttpRequestHeader Header(Method,URL);
 	if (Port == 80)
 		Header.setValue("Host",Web);
@@ -255,6 +292,14 @@
 	if (Loop.exec() == QDialog::Rejected)
 	{
 		Request.abort();
+
+		if (UseProxy) {
+			QNetworkProxy proxy;
+			proxy.setType(QNetworkProxy::NoProxy);
+			qDebug() << "Removing proxy";
+			QNetworkProxy::setApplicationProxy(proxy);
+		}
+
 		return false;
 	}
 	Content = Request.readAll();
@@ -267,6 +312,14 @@
 			Content = Uncompressed;
 		}
 	}
+
+	if (UseProxy) {
+		QNetworkProxy proxy;
+		proxy.setType(QNetworkProxy::NoProxy);
+		qDebug() << "Removing proxy";
+		QNetworkProxy::setApplicationProxy(proxy);
+	}
+
 #ifdef DEBUG_NONGET_CALL
 	showDebug(Method,URL,Data,Content);
 #endif
